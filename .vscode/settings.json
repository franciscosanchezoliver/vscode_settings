{
    // we don't want to show several folders in just
    // one line
    "explorer.compactFolders": false,

    // sticki scroll to know in what method we are in
    "editor.experimental.stickyScroll.enabled": true,
    
    // Activate easy motion to be able to search faster
    // to search use <leader><leader>/
    "vim.easymotion": true,

    // set the relative number of lines by default
    "editor.lineNumbers": "relative",

    // Use space instead of '\' for the leader key
    "vim.leader": "<Space>", 
    "debug.console.wordWrap": false,

    // Show variable values in the same line
    "debug.inlineValues": "on",
    
    // Draw lines at lines
    "editor.rulers": [80,120],

    // color of the line
    "workbench.colorCustomizations": {
        "editorRuler.foreground": "#ff0000"
    }, 
    "debug.openDebug": "neverOpen",

    // Custom commands for when we are in normal mode
      "vim.normalModeKeyBindingsNonRecursive": [
    // Search with easy motion
    {
      "before": [
        "f"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "/"
      ]
    },
    // Go back
    {
      "before": [
        "<leader>",
        "s"
      ],
      "commands": [
        "workbench.action.navigateBack"
      ]
    },
    {
        "before":[
            "<leader>", 
            "o"
        ],
        "commands": [
            "workbench.action.debug.stepOut"
        ]
    },
    // Debug
    // Go to debugging lnie
    {
      "before": [
        "leader",
        "d"
      ],
      "commands": [
        "workbench.action.debug.callStackTop"
      ]
    },
    // Step over
    {
      "before": [
        "<leader>",
        "n"
      ],
      "commands": [
        "workbench.action.debug.stepOver"
      ]
    },
    // step into
    {
      "before": [
        "<leader>",
        "i"
      ],
      "commands": [
        "workbench.action.debug.stepInto"
      ]
    },
    // add a breakpoint
    {
      "before": [
        "<leader>",
        "b"
      ],
      "commands": [
        "editor.debug.action.toggleBreakpoint"
      ]
    },
    {
      "before": [
        "<leader>",
        "ñ"
      ],
      "commands": [
        "workbench.action.debug.continue"
      ]
    },
    {
      // go inside method
      "before": [
        "<leader>",
        "a"
      ],
      "commands": [
        "editor.action.revealDefinition"
      ]
    },
    // resize width active tab
    {
      "before": [
        "<leader>",
        "u"
      ],
      "commands": [
        "workbench.action.toggleEditorWidths"
      ]
    },
    // Go to previous tab
    {
      "before": [
        "<S-h>"
      ],
      "commands": [
        ":bprevious"
      ]
    },
    // go to next tab
    {
      "before": [
        "<S-l>"
      ],
      "commands": [
        ":bnext"
      ]
    },
    // move between panes
    {
      "before": [
        "leader",
        "h"
      ],
      "commands": [
        "workbench.action.focusLeftGroup"
      ]
    },
    {
      "before": [
        "leader",
        "j"
      ],
      "commands": [
        "workbench.action.focusBelowGroup"
      ]
    },
    {
      "before": [
        "leader",
        "k"
      ],
      "commands": [
        "workbench.action.focusAboveGroup"
      ]
    },
    {
      "before": [
        "leader",
        "l"
      ],
      "commands": [
        "workbench.action.focusRightGroup"
      ]
    },
    // split windows
    {
      "before": [
        "<leader>",
        "w"
      ],
      "commands": [
        "workbench.action.splitEditor"
      ]
    },
    // find file in explorer
    {
      "before": [
        "<leader>",
        "f"
      ],
      "commands": [
        "revealInExplorer"
      ]
    },
    // toggle bar
    {
      "before": [
        "<leader>",
        "e"
      ],
      "commands": [
        "workbench.action.toggleSidebarVisibility"
      ]
    },
    // Indenting
    {
      "before": [
        "<"
      ],
      "commands": [
        "editor.action.outdentLines"
      ]
    },
    {
      "before": [
        ">"
      ],
      "commands": [
        "editor.action.indentLines"
      ]
    },
    // Comment line
    {
      "before": [
        "leader",
        "c"
      ],
      "commands": [
        "editor.action.commentLine"
      ]
    },
    // Close current editor
    {
      "before": [
        "leader",
        "q"
      ],
      "commands": [
        "workbench.action.closeActiveEditor"
      ]
    },
    // Move editor to group
    {
      "before": [
        "leader",
        "m",
        "k"
      ],
      "commands": [
        "workbench.action.moveEditorToAboveGroup"
      ]
    },
    {
      "before": [
        "leader",
        "m",
        "j"
      ],
      "commands": [
        "workbench.action.moveEditorToBelowGroup"
      ]
    },
    {
      "before": [
        "leader",
        "m",
        "h"
      ],
      "commands": [
        "workbench.action.moveEditorToPreviousGroup"
      ]
    },
    {
      "before": [
        "leader",
        "m",
        "l"
      ],
      "commands": [
        "workbench.action.moveEditorToNextGroup"
      ]
    },
    {
      "before": ["leader", "º"], 
      "commands": ["workbench.action.debug.start"]
    }
  ],

    "vim.insertModeKeyBindings": [
        // going from insert mode to normal mode
        {
            "before": ["j", "k"], 
            "after": ["<Esc>"]
        }
    ], 

    // key combinations that we don't want vim to
    // handle it
    "vim.handleKeys": {
        // Select all text
        "<C-a>": false,

        // Find 
        "<C-f>": false, 
    },

    // Parts of vscode we don't need to see by default
    //"workbench.statusBar.visible": false,
    "workbench.sideBar.location": "right",
    "window.menuBarVisibility": "compact",
    "workbench.colorTheme": "Abyss",
    "editor.minimap.enabled": false,
    "breadcrumbs.enabled": false,
    "vim.visualModeKeyBindings": [
        // Indenting
        {"before":["<"], "commands":["editor.action.outdentLines"]},
        {"before":[">"], "commands":["editor.action.indentLines"]},

        //Comment lines
        {"before": ["leader", "c"], "commands":["editor.action.commentLine"]},
    ],
      "background.fullscreen": {
    "images": [
    "https://images3.alphacoders.com/135/thumb-1920-1358139.png", // Darth Vader
    "https://images5.alphacoders.com/593/thumb-1920-593850.jpg", // mandalorian
    "https://images2.alphacoders.com/613/thumb-1920-613081.jpg", // Ships
    "https://images3.alphacoders.com/817/thumb-1920-81737.jpg", // City skyline
    "https://picfiles.alphacoders.com/646/646408.jpeg", // Synthwave Mountain
    "https://images3.alphacoders.com/130/thumb-1920-1305241.jpg", // Mandalorian half face
    "https://images8.alphacoders.com/136/thumb-1920-1363709.png", // Red Landscape
    "https://images3.alphacoders.com/133/thumb-1920-1331117.png", // Blue Nebula
    "https://images3.alphacoders.com/130/thumb-1920-1305184.jpg", // A City from Star Wars
    "https://images4.alphacoders.com/987/thumb-1920-987919.jpg", // Landscape: Cat , Paris
    "https://images5.alphacoders.com/456/thumb-1920-456536.jpg", // Landscape: New York
    "https://images2.alphacoders.com/130/thumb-1920-1308322.jpeg", // Landscape: Blue
    "https://images2.alphacoders.com/916/thumb-1920-916108.jpg", // Red planet
    "https://images4.alphacoders.com/903/thumb-1920-903637.jpg", // Retro wave city
    "https://images6.alphacoders.com/129/1293302.jpg", // Japanesse castle (Pixel Art)
    "https://images8.alphacoders.com/128/thumb-1920-1281520.jpg", // Night and Raining futuristic city (Pixel Art)
    "https://images7.alphacoders.com/125/thumb-1920-1259209.png",// Ramen Bar (Pixel Art)
    "https://images8.alphacoders.com/135/thumb-1920-1358524.png", // Tree in the Night (Pixel Art)
    ], // urls of your images
    "opacity": 0.91, // 0.85 ~ 0.95 recommended
    "size": "cover", // also css, `cover` to self-adaption (recommended)，or `contain`、`200px 200px`
    "position": "center", // alias to `background-position`, default `center`
    "interval": 0 // seconds of interval for carousel, default `0` to disabled.
  },
  "cSpell.userWords": [
    "dataframe",
    "numpy",
    "sklearn",
    "xgboost"
  ]
}
